/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LandingImport } from './routes/_landing'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as LandingPrivacyImport } from './routes/_landing/privacy'
import { Route as LandingFaqImport } from './routes/_landing/faq'
import { Route as LandingBlogImport } from './routes/_landing/blog'
import { Route as LandingAboutImport } from './routes/_landing/about'
import { Route as AppUserImport } from './routes/_app/user'
import { Route as AppConnectionNewImport } from './routes/_app/connection/new'
import { Route as AppConnectionConnectionIdImport } from './routes/_app/connection/$connectionId'
import { Route as AppChatConversationIdImport } from './routes/_app/chat/$conversationId'

// Create/Update Routes

const LandingRoute = LandingImport.update({
  id: '/_landing',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LandingPrivacyRoute = LandingPrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => LandingRoute,
} as any)

const LandingFaqRoute = LandingFaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => LandingRoute,
} as any)

const LandingBlogRoute = LandingBlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => LandingRoute,
} as any)

const LandingAboutRoute = LandingAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LandingRoute,
} as any)

const AppUserRoute = AppUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => AppRoute,
} as any)

const AppConnectionNewRoute = AppConnectionNewImport.update({
  id: '/connection/new',
  path: '/connection/new',
  getParentRoute: () => AppRoute,
} as any)

const AppConnectionConnectionIdRoute = AppConnectionConnectionIdImport.update({
  id: '/connection/$connectionId',
  path: '/connection/$connectionId',
  getParentRoute: () => AppRoute,
} as any)

const AppChatConversationIdRoute = AppChatConversationIdImport.update({
  id: '/chat/$conversationId',
  path: '/chat/$conversationId',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/_app/user': {
      id: '/_app/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof AppUserImport
      parentRoute: typeof AppImport
    }
    '/_landing/about': {
      id: '/_landing/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LandingAboutImport
      parentRoute: typeof LandingImport
    }
    '/_landing/blog': {
      id: '/_landing/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LandingBlogImport
      parentRoute: typeof LandingImport
    }
    '/_landing/faq': {
      id: '/_landing/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof LandingFaqImport
      parentRoute: typeof LandingImport
    }
    '/_landing/privacy': {
      id: '/_landing/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof LandingPrivacyImport
      parentRoute: typeof LandingImport
    }
    '/_app/chat/$conversationId': {
      id: '/_app/chat/$conversationId'
      path: '/chat/$conversationId'
      fullPath: '/chat/$conversationId'
      preLoaderRoute: typeof AppChatConversationIdImport
      parentRoute: typeof AppImport
    }
    '/_app/connection/$connectionId': {
      id: '/_app/connection/$connectionId'
      path: '/connection/$connectionId'
      fullPath: '/connection/$connectionId'
      preLoaderRoute: typeof AppConnectionConnectionIdImport
      parentRoute: typeof AppImport
    }
    '/_app/connection/new': {
      id: '/_app/connection/new'
      path: '/connection/new'
      fullPath: '/connection/new'
      preLoaderRoute: typeof AppConnectionNewImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppUserRoute: typeof AppUserRoute
  AppChatConversationIdRoute: typeof AppChatConversationIdRoute
  AppConnectionConnectionIdRoute: typeof AppConnectionConnectionIdRoute
  AppConnectionNewRoute: typeof AppConnectionNewRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppUserRoute: AppUserRoute,
  AppChatConversationIdRoute: AppChatConversationIdRoute,
  AppConnectionConnectionIdRoute: AppConnectionConnectionIdRoute,
  AppConnectionNewRoute: AppConnectionNewRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface LandingRouteChildren {
  LandingAboutRoute: typeof LandingAboutRoute
  LandingBlogRoute: typeof LandingBlogRoute
  LandingFaqRoute: typeof LandingFaqRoute
  LandingPrivacyRoute: typeof LandingPrivacyRoute
}

const LandingRouteChildren: LandingRouteChildren = {
  LandingAboutRoute: LandingAboutRoute,
  LandingBlogRoute: LandingBlogRoute,
  LandingFaqRoute: LandingFaqRoute,
  LandingPrivacyRoute: LandingPrivacyRoute,
}

const LandingRouteWithChildren =
  LandingRoute._addFileChildren(LandingRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LandingRouteWithChildren
  '/user': typeof AppUserRoute
  '/about': typeof LandingAboutRoute
  '/blog': typeof LandingBlogRoute
  '/faq': typeof LandingFaqRoute
  '/privacy': typeof LandingPrivacyRoute
  '/chat/$conversationId': typeof AppChatConversationIdRoute
  '/connection/$connectionId': typeof AppConnectionConnectionIdRoute
  '/connection/new': typeof AppConnectionNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LandingRouteWithChildren
  '/user': typeof AppUserRoute
  '/about': typeof LandingAboutRoute
  '/blog': typeof LandingBlogRoute
  '/faq': typeof LandingFaqRoute
  '/privacy': typeof LandingPrivacyRoute
  '/chat/$conversationId': typeof AppChatConversationIdRoute
  '/connection/$connectionId': typeof AppConnectionConnectionIdRoute
  '/connection/new': typeof AppConnectionNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_landing': typeof LandingRouteWithChildren
  '/_app/user': typeof AppUserRoute
  '/_landing/about': typeof LandingAboutRoute
  '/_landing/blog': typeof LandingBlogRoute
  '/_landing/faq': typeof LandingFaqRoute
  '/_landing/privacy': typeof LandingPrivacyRoute
  '/_app/chat/$conversationId': typeof AppChatConversationIdRoute
  '/_app/connection/$connectionId': typeof AppConnectionConnectionIdRoute
  '/_app/connection/new': typeof AppConnectionNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/user'
    | '/about'
    | '/blog'
    | '/faq'
    | '/privacy'
    | '/chat/$conversationId'
    | '/connection/$connectionId'
    | '/connection/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/user'
    | '/about'
    | '/blog'
    | '/faq'
    | '/privacy'
    | '/chat/$conversationId'
    | '/connection/$connectionId'
    | '/connection/new'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_landing'
    | '/_app/user'
    | '/_landing/about'
    | '/_landing/blog'
    | '/_landing/faq'
    | '/_landing/privacy'
    | '/_app/chat/$conversationId'
    | '/_app/connection/$connectionId'
    | '/_app/connection/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LandingRoute: typeof LandingRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LandingRoute: LandingRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/_landing"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/user",
        "/_app/chat/$conversationId",
        "/_app/connection/$connectionId",
        "/_app/connection/new"
      ]
    },
    "/_landing": {
      "filePath": "_landing.tsx",
      "children": [
        "/_landing/about",
        "/_landing/blog",
        "/_landing/faq",
        "/_landing/privacy"
      ]
    },
    "/_app/user": {
      "filePath": "_app/user.tsx",
      "parent": "/_app"
    },
    "/_landing/about": {
      "filePath": "_landing/about.tsx",
      "parent": "/_landing"
    },
    "/_landing/blog": {
      "filePath": "_landing/blog.tsx",
      "parent": "/_landing"
    },
    "/_landing/faq": {
      "filePath": "_landing/faq.tsx",
      "parent": "/_landing"
    },
    "/_landing/privacy": {
      "filePath": "_landing/privacy.tsx",
      "parent": "/_landing"
    },
    "/_app/chat/$conversationId": {
      "filePath": "_app/chat/$conversationId.tsx",
      "parent": "/_app"
    },
    "/_app/connection/$connectionId": {
      "filePath": "_app/connection/$connectionId.tsx",
      "parent": "/_app"
    },
    "/_app/connection/new": {
      "filePath": "_app/connection/new.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
